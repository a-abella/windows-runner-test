name: Execute Project Suite PRIVATE
run-name: TestExecute run for ${{ inputs.project }} project 
on:
  workflow_dispatch:
    inputs:
      project:
        type: choice
        description: Project to be executed
        options:
        - Web 
        - Desktop
        - Mobile
      runner:
        type: choice
        description: select a runner
        options:
          - windows-22
          - windows-19
jobs:
  DownloadInstallAndRunTE:
    timeout-minutes: 30
    runs-on:
      - self-hosted
      - ${{ inputs.runner }}
    steps:
      - name: Enable Long-Paths
        run: |
          # See https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem' -Name 'LongPathsEnabled' -Value 1
        shell: powershell
      - uses: actions/checkout@v3
      - run: echo "Starting job [Event=${{ github.event_name }}]"
      - run: echo "This job is now running on a ${{ runner.os }} self-hosted runner!"
      - name: Download + Install TestExecute
        run: |
          if (!( Test-Path "${{ vars.TEST_EXECUTE_BIN }}" )) {
            $ProgressPreference = 'SilentlyContinue'
            Invoke-WebRequest -Uri "${{ vars.TEST_EXECUTE_DOWNLOAD_URL }}" -OutFile ".\TE.exe"
            .\TE.exe -SilentInstall
          }
        shell: cmd
      - name: Create Tester User
        run: |
          $pw = ConvertTo-SecureString -String "pW01!" -AsPlainText -Force
          $user = New-LocalUser -Name "Tester" -Password $pw
          Add-LocalGroupMember -Group "Administrators" -Member $user  
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $user  
        shell: powershell
      - name: Disable Defender Antivirus
        run: |
          Write-Host "Disable Windows Defender..."
          $avPreference = @(
              @{DisableArchiveScanning = $true}
              @{DisableAutoExclusions = $true}
              @{DisableBehaviorMonitoring = $true}
              @{DisableBlockAtFirstSeen = $true}
              @{DisableCatchupFullScan = $true}
              @{DisableCatchupQuickScan = $true}
              @{DisableIntrusionPreventionSystem = $true}
              @{DisableIOAVProtection = $true}
              @{DisablePrivacyMode = $true}
              @{DisableScanningNetworkFiles = $true}
              @{DisableScriptScanning = $true}
              @{MAPSReporting = 0}
              @{PUAProtection = 0}
              @{SignatureDisableUpdateOnStartupWithoutEngine = $true}
              @{SubmitSamplesConsent = 2}
              @{ScanAvgCPULoadFactor = 5; ExclusionPath = @("D:\", "C:\")}
              @{DisableRealtimeMonitoring = $true}
          )

          $avPreference += @(
              @{EnableControlledFolderAccess = "Disable"}
              @{EnableNetworkProtection = "Disabled"}
          )

          $avPreference | Foreach-Object {
              $avParams = $_
              Set-MpPreference @avParams
          }

          Write-Host "Disable Windows Defender scheduled tasks"
          Get-ScheduledTask -TaskPath '\Microsoft\Windows\Windows Defender\' | Disable-ScheduledTask | Out-Null

          # https://github.com/actions/runner-images/issues/4277
          # https://docs.microsoft.com/en-us/microsoft-365/security/defender-endpoint/microsoft-defender-antivirus-compatibility?view=o365-worldwide
          $atpRegPath = 'HKLM:\SOFTWARE\Policies\Microsoft\Windows Advanced Threat Protection'
          if (Test-Path $atpRegPath) {
              Write-Host "Set Microsoft Defender Antivirus to passive mode"
              Set-ItemProperty -Path $atpRegPath -Name 'ForceDefenderPassiveMode' -Value '1' -Type 'DWORD'
          }
        shell: powershell
      - name: Raise GDI process handle quota
        run: |
          # https://docs.microsoft.com/en-us/windows/win32/sysinfo/gdi-objects
          # This value can be set to a number between 256 and 65,536

          $defaultValue = 20000
          Write-Host "Set the GDIProcessHandleQuota value to $defaultValue"
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows" -Name GDIProcessHandleQuota -Value $defaultValue
          Set-ItemProperty -Path "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows NT\CurrentVersion\Windows" -Name GDIProcessHandleQuota -Value $defaultValue
        shell: powershell
      - name: Disable IE Enhanced Security Mode and Welcome Screen
        run: |
          Rundll32 iesetup.dll, IEHardenLMSettings, 1, True
          Rundll32 iesetup.dll, IEHardenUser, 1, True
          Rundll32 iesetup.dll, IEHardenAdmin, 1, True
          $AdminKey = "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}"
          $UserKey = "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A8-37EF-4b3f-8CFC-4F3A74704073}"
          Set-ItemProperty -Path $AdminKey -Name "IsInstalled" -Value 0 -Force
          Set-ItemProperty -Path $UserKey -Name "IsInstalled" -Value 0 -Force

          $ieProcess = Get-Process -Name Explorer -ErrorAction SilentlyContinue

          if ($ieProcess){
              Stop-Process -Name Explorer -Force -ErrorAction Continue
          }
          Write-Host "IE Enhanced Security Configuration (ESC) has been disabled."
          
          $AdminKey = "HKLM:\Software\Policies\Microsoft\Internet Explorer\Main"
          New-Item -Path $AdminKey -Value 1 -Force
          Set-ItemProperty -Path $AdminKey -Name "DisableFirstRunCustomize" -Value 1 -Force
          Write-Host "Disabled IE Welcome screen"
        shell: powershell
      - name: Disable UAC
        run: |
          Set-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -Value 00000000 -Force
          Write-Host "User Access Control (UAC) has been disabled."
        shell: powershell
      - name: Enable Developer Mode
        run: |
          # Create AppModelUnlock if it doesn't exist, required for enabling Developer Mode
          $RegistryKeyPath = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock"
          if (-not(Test-Path -Path $RegistryKeyPath)) {
              New-Item -Path $RegistryKeyPath -ItemType Directory -Force
          }

          # Add registry value to enable Developer Mode
          Set-ItemProperty -Path $RegistryKeyPath -Name AllowDevelopmentWithoutDevLicense -Value 1
        shell: powershell
      - name: Configure RDP prerequisites for CreateSession
        run: |
          # enable RDP
          Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -name "fDenyTSConnections" -value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          
          # disable ServerManager on logon
          Get-ScheduledTask -TaskName ServerManager | Disable-ScheduledTask -Verbose
          
          # disable RDP password popup prompts
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -Name "fPromptForPassword" -Value 0
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -Name "PromptForCredsOnClient" -Value 0
          
          # disable ctrl-alt-del screen
          Set-ItemProperty -Path "HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\System" -Name "disablecad" -Value 1
          
          # set RDP security protocol
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -Name "SecurityLayer" -Value 1
          
          # disable RDP client cert popup
          $itempath = "HKCU:\Software\Microsoft\Terminal Server Client"
          if (!(Test-Path "$itempath")) {
            New-Item -Path "$itempath"
          }
          Set-ItemProperty -Path "$itempath" -Name "AuthenticationLevelOverride" -Value 0
          
          # limit RDP sessions per user
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -Name "fSingleSessionPerUser" -Value 1
          
          # disable system banner texts
          Set-ItemProperty -Path "HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\System" -Name "LegalNoticeText" -Value ""
          Set-ItemProperty -Path "HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\System" -Name "LegalNoticeCaption" -Value ""
        shell: powershell
      - name: Run TC in CreateSession
        run: |
          REM .\test-runner.bat ${{ secrets.TEST_EXECUTE_ACCESS_KEY }} ${{ inputs.project }}
          REM Clears the screen
          CLS
          @ECHO ON

          REM Variable to track if tests passed
          set Tests_Passed=0
          set Error_Level=0

          IF ${{ secrets.TEST_EXECUTE_ACCESS_KEY }}.==. GOTO AccessKeyMissing
          set AccessKey=${{ secrets.TEST_EXECUTE_ACCESS_KEY }}

          REM By default we run desktop testing
          set ProjectPath="%cd%\DesktopTesting\DesktopTesting.pjs"

          IF "${{ inputs.project }}" == "Mobile" GOTO MobileProjectRun
          IF "${{ inputs.project }}" == "Web" GOTO WebProjectRun
          IF "${{ inputs.project }}" == "Desktop" GOTO DesktopProjectRun
          IF NOT ${{ inputs.project }}.==. GOTO ParamProjectPath
          GOTO EchoProjectPath

          :MobileProjectRun
          set ProjectPath="%cd%\MobileTesting\MobileTesting.pjs"
          GOTO EchoProjectPath

          :WebProjectRun
          set ProjectPath="%cd%\WebTesting\WebTesting.pjs"
          GOTO EchoProjectPath

          :DesktopProjectRun
          set ProjectPath="%cd%\DesktopTesting\DesktopTesting.pjs"
          GOTO EchoProjectPath

          :ParamProjectPath
          set ProjectPath=${{ inputs.project }}
          GOTO EchoProjectPath


          :EchoProjectPath
          ECHO Starting TestExecute for project %ProjectPath%
          GOTO ExecuteTest


          :ExecuteTest
          REM Launches TestExecute
          REM executes the specified project
          REM and closes TestExecute when the run is over
          IF EXIST %cd%\logs RMDIR /S /Q %cd%\logs
          mkdir %cd%\logs
          "C:\Program Files (x86)\SmartBear\TestExecute 15\x64\Bin\SessionCreator.exe" RunTest /UseActiveSession /ProjectPath:%ProjectPath% /UserName:Tester /Password:pW01! /AccessKey:%AccessKey% /Timeout:600 /ExportLog:%cd%\logs\runlog.html /shr:%cd%\logs\shared-repo-link.txt /shrn:LogFromGitHubAction /shrei:7
          
          set Error_Level=%ERRORLEVEL%
          ECHO TestExecute execution finished with code: %Error_Level%

          IF "%Error_Level%" == "1001" GOTO NotEnoughDiskSpace
          IF "%Error_Level%" == "1000" GOTO AnotherInstance
          IF "%Error_Level%" == "127" GOTO DamagedInstall
          IF "%Error_Level%" == "4" GOTO Timeout
          IF "%Error_Level%" == "3" GOTO CannotRun
          IF "%Error_Level%" == "2" GOTO Errors
          IF "%Error_Level%" == "1" GOTO Warnings
          IF "%Error_Level%" == "0" GOTO Success
          IF "%Error_Level%" == "-1" GOTO LicenseFailed
          IF NOT "%Error_Level%" == "0" GOTO UnexpectedErrors
          
          :NotEnoughDiskSpace
          ECHO There is not enough free disk space to run TestExecute
          GOTO GenerateReport
          
          :AnotherInstance
          ECHO Another instance of TestExecute is already running
          GOTO GenerateReport
          
          :DamagedInstall
          ECHO TestExecute installation is damaged or some files are missing
          GOTO GenerateReport
          
          :Timeout
          ECHO Timeout elapsed
          GOTO GenerateReport
          
          :CannotRun
          ECHO The script cannot be run
          GOTO GenerateReport
          
          :Errors
          ECHO There are errors
          GOTO GenerateReport
          
          :Warnings
          ECHO There are warnings
          set Tests_Passed=1
          GOTO GenerateReport
          
          :Success
          ECHO No errors
          set Tests_Passed=1
          GOTO GenerateReport
          
          :LicenseFailed
          ECHO License check failed
          GOTO GenerateReport

          :UnexpectedErrors
          ECHO Unexpected Error: %Error_Level%
          GOTO GenerateReport

          :AccessKeyMissing
          ECHO Access Key is missing. Usage:
          ECHO "test-runner.bat <AccessKey> <Project Path>"
          ECHO   Project Path is optional, if not defined, will try to run desktop project.
          GOTO End

          :GenerateReport
          IF EXIST "%cd%\logs\error.log" GOTO PrintErrorLog
          IF EXIST "%cd%\logs\shared-repo-link.txt" GOTO PrintURL
          IF EXIST "%cd%\logs\runlog.html" GOTO ReportFound
          ECHO Error. No logs or reports found!!!
          GOTO End

          :PrintErrorLog
          ECHO Error log found. This is the content:
          type %cd%\logs\error.log
          GOTO End

          :PrintURL
          ECHO Shared repo created:
          type %cd%\logs\shared-repo-link.txt
          GOTO End

          :ReportFound
          ECHO Local report file found!
          GOTO End

          :End
          IF "%Tests_Passed%" == "1" GOTO OkEnd
          exit /b %Error_Level%

          :OkEnd
        shell: cmd
      - run: echo "Test executed!"
        shell: cmd

      - name: Cleanup PS run
        if: always()
        run: |
          $user = "Tester"
          $homedir = "C:\Users\$user"
          Get-CimInstance -Class Win32_userprofile | ? { $_.LocalPath -match [regex]::Escape($homedir) } | % { Remove-CimInstance -InputObject $_ }
          Remove-LocalUser -Name Tester
        shell: powershell