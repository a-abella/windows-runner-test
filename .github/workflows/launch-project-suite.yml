name: Execute Project Suite
run-name: TestExecute run for ${{ inputs.project }} project 
on:
  workflow_dispatch:
    inputs:
      project:
        type: choice
        description: Project to be executed
        options: 
        - Desktop
        - Mobile
        - Web
      runner:
        type: choice
        description: select a runner
        options:
          - windows-22
          - windows-19
jobs:
  DownloadInstallAndRunTE:
    timeout-minutes: 30
    runs-on: [self-hosted, windows]
    steps:
      - uses: actions/checkout@v3
      - run: echo "Starting job [Event=${{ github.event_name }}]"
      - run: echo "This job is now running on a ${{ runner.os }} self-hosted runner!"
      # - run: Invoke-WebRequest -Uri "${{ vars.TEST_EXECUTE_DOWNLOAD_URL }}" -OutFile ".\TE.exe"
      # - run: echo "TestExecute downloaded - ${{ vars.TEST_EXECUTE_DOWNLOAD_URL }}"
      # - run: dir
      #   shell: cmd
      # - run: .\TE.exe -SilentInstall
      #   shell: cmd
      - run: set PATH_TE="${{ vars.TEST_EXECUTE_BIN }}"
        shell: cmd
      - name: create tester user
        run: |
          $pw = ConvertTo-SecureString -String "pW01!" -AsPlainText -Force
          $user = New-LocalUser -Name "Tester" -Password $pw
          Add-LocalGroupMember -Group "Administrators" -Member $user  
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $user  
        shell: powershell
      - name: configure prereqs for CreateSession
        run: |
          # disable ServerManager on logon
          Get-ScheduledTask -TaskName ServerManager | Disable-ScheduledTask -Verbose
          
          # disable RDP password popup prompts
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -Name "fPromptForPassword" -Value 0
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -Name "PromptForCredsOnClient" -Value 0
          
          # disable ctrl-alt-del screen
          Set-ItemProperty -Path "HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\System" -Name "disablecad" -Value 1
          
          # set RDP security protocol
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -Name "SecurityLayer" -Value 1
          
          # disable RDP client cert popup
          $itempath = "HKCU:\Software\Microsoft\Terminal Server Client"
          if (!(Test-Path "$itempath")) {
            New-Item -Path "$itempath"
          }
          Set-ItemProperty -Path "$itempath" -Name "AuthenticationLevelOverride" -Value 0
          
          # limit RDP sessions per user
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -Name "fSingleSessionPerUser" -Value 1
          
          # disable system banner texts
          Set-ItemProperty -Path "HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\System" -Name "LegalNoticeText" -Value ""
          Set-ItemProperty -Path "HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\System" -Name "LegalNoticeCaption" -Value ""
        shell: powershell
      - name: Run TC in CreateSession
        run: |
          REM .\test-runner.bat ${{ secrets.TEST_EXECUTE_ACCESS_KEY }} ${{ inputs.project }}
          REM Clears the screen
          CLS
          @ECHO ON

          REM Variable to track if tests passed
          set Tests_Passed=0
          set Error_Level=0

          IF ${{ secrets.TEST_EXECUTE_ACCESS_KEY }}.==. GOTO AccessKeyMissing
          set AccessKey=${{ secrets.TEST_EXECUTE_ACCESS_KEY }}

          REM By default we run desktop testing
          set ProjectPath="%cd%\DesktopTesting\DesktopTesting.pjs"

          IF "${{ inputs.project }}" == "Mobile" GOTO MobileProjectRun
          IF "${{ inputs.project }}" == "Web" GOTO WebProjectRun
          IF "${{ inputs.project }}" == "Desktop" GOTO DesktopProjectRun
          IF NOT ${{ inputs.project }}.==. GOTO ParamProjectPath
          GOTO EchoProjectPath

          :MobileProjectRun
          set ProjectPath="%cd%\MobileTesting\MobileTesting.pjs"
          GOTO EchoProjectPath

          :WebProjectRun
          set ProjectPath="%cd%\WebTesting\WebTesting.pjs"
          GOTO EchoProjectPath

          :DesktopProjectRun
          set ProjectPath="%cd%\DesktopTesting\DesktopTesting.pjs"
          GOTO EchoProjectPath

          :ParamProjectPath
          set ProjectPath=${{ inputs.project }}
          GOTO EchoProjectPath


          :EchoProjectPath
          ECHO Starting TestExecute for project %ProjectPath%
          GOTO ExecuteTest


          :ExecuteTest
          REM Launches TestExecute
          REM executes the specified project
          REM and closes TestExecute when the run is over
          IF EXIST %cd%\logs RMDIR /S %cd%\logs
          mkdir %cd%\logs
          "C:\Program Files (x86)\SmartBear\TestExecute 15\Bin\SessionCreator.exe" RunTest /UseActiveSession /ProjectPath:%ProjectPath% /UserName:Tester /Password:pW01! /AccessKey:%AccessKey% /Timeout:600 /ExportLog:%cd%\logs\runlog.html

          set Error_Level=%ERRORLEVEL%
          ECHO TestExecute execution finished with code: %Error_Level%

          IF "%Error_Level%" == "1001" GOTO NotEnoughDiskSpace
          IF "%Error_Level%" == "1000" GOTO AnotherInstance
          IF "%Error_Level%" == "127" GOTO DamagedInstall
          IF "%Error_Level%" == "4" GOTO Timeout
          IF "%Error_Level%" == "3" GOTO CannotRun
          IF "%Error_Level%" == "2" GOTO Errors
          IF "%Error_Level%" == "1" GOTO Warnings
          IF "%Error_Level%" == "0" GOTO Success
          IF "%Error_Level%" == "-1" GOTO LicenseFailed
          IF NOT "%Error_Level%" == "0" GOTO UnexpectedErrors
          
          :NotEnoughDiskSpace
          ECHO There is not enough free disk space to run TestExecute
          GOTO GenerateReport
          
          :AnotherInstance
          ECHO Another instance of TestExecute is already running
          GOTO GenerateReport
          
          :DamagedInstall
          ECHO TestExecute installation is damaged or some files are missing
          GOTO GenerateReport
          
          :Timeout
          ECHO Timeout elapsed
          GOTO GenerateReport
          
          :CannotRun
          ECHO The script cannot be run
          GOTO GenerateReport
          
          :Errors
          ECHO There are errors
          GOTO GenerateReport
          
          :Warnings
          ECHO There are warnings
          set Tests_Passed=1
          GOTO GenerateReport
          
          :Success
          ECHO No errors
          set Tests_Passed=1
          GOTO GenerateReport
          
          :LicenseFailed
          ECHO License check failed
          GOTO GenerateReport

          :UnexpectedErrors
          ECHO Unexpected Error: %Error_Level%
          GOTO GenerateReport

          :AccessKeyMissing
          ECHO Access Key is missing. Usage:
          ECHO "test-runner.bat <AccessKey> <Project Path>"
          ECHO   Project Path is optional, if not defined, will try to run desktop project.
          GOTO End

          :GenerateReport
          IF EXIST "%cd%\logs\error.log" GOTO PrintErrorLog
          IF EXIST "%cd%\logs\shared-repo-link.txt" GOTO PrintURL
          IF EXIST "%cd%\logs\runlog.html" GOTO ReportFound
          ECHO Error. No logs or reports found!!!
          GOTO End

          :PrintErrorLog
          ECHO Error log found. This is the content:
          type %cd%\logs\error.log
          GOTO End

          :PrintURL
          ECHO Shared repo created:
          type %cd%\logs\shared-repo-link.txt
          GOTO End

          :ReportFound
          ECHO Local report file found!
          GOTO End

          :End
          IF "%Tests_Passed%" == "1" GOTO OkEnd
          exit /b %Error_Level%

          :OkEnd
        shell: cmd
      - run: echo "Test executed!"
        shell: cmd

      - name: Cleanup PS run
        if: ${{ !cancelled() && (success() || failure()) }}
        run: |
          $user = "Tester"
          $homedir = "C:\Users\$user"
          Remove-LocalUser -Name "$user"
          if (Test-Path $homedir) { Remove-Item $homedir -Recurse -Force }
        shell: powershell